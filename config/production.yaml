apiVersion: v1
kind: Namespace
metadata:
  name: triton-system
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: triton-loadbalancer-controller
  namespace: triton-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: triton-loadbalancer-controller
rules:
- apiGroups: [""]
  resources: ["services"]
  verbs: ["get", "list", "watch", "update", "patch"]
- apiGroups: [""]
  resources: ["services/status"]
  verbs: ["get", "update", "patch"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["coordination.k8s.io"]
  resources: ["leases"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: triton-loadbalancer-controller
subjects:
- kind: ServiceAccount
  name: triton-loadbalancer-controller
  namespace: triton-system
roleRef:
  kind: ClusterRole
  name: triton-loadbalancer-controller
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: triton-config
  namespace: triton-system
data:
  lb-package: "g4-highcpu-1G"
  lb-image: ""  # Set your HAProxy image ID here
  provision-timeout: "300"
  delete-timeout: "300"
---
apiVersion: v1
kind: Secret
metadata:
  name: triton-credentials
  namespace: triton-system
type: Opaque
stringData:
  triton-url: ""     # Replace with your Triton CloudAPI endpoint
  triton-account: "" # Replace with your Triton account ID
  triton-key-id: ""  # Replace with your Triton key ID (fingerprint)
  triton-key: |      # MUST BE PEM FORMAT: $ ssh-keygen -p -m PEM -f <id_rsa_file> to convert
    -----BEGIN RSA PRIVATE KEY-----
    ...
    -----END RSA PRIVATE KEY-----
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: triton-loadbalancer-controller
  namespace: triton-system
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: triton-loadbalancer-controller
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: triton-loadbalancer-controller
  namespace: triton-system
  labels:
    app: triton-loadbalancer-controller
spec:
  replicas: 2
  selector:
    matchLabels:
      app: triton-loadbalancer-controller
  template:
    metadata:
      labels:
        app: triton-loadbalancer-controller
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: triton-loadbalancer-controller
      securityContext:
        runAsNonRoot: true
        runAsUser: 65532
        fsGroup: 65532
      containers:
      - name: manager
        image: triton/loadbalancer-controller:latest
        imagePullPolicy: IfNotPresent
        securityContext:
          allowPrivilegeEscalation: false
          runAsNonRoot: true
          runAsUser: 65532
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        command:
        - /manager
        args:
        - --triton-key-path=/etc/triton/key
        - --triton-key-id=$(TRITON_KEY_ID)
        - --triton-account=$(TRITON_ACCOUNT)
        - --triton-url=$(TRITON_URL)
        - --enable-leader-election
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=:8080
        env:
        - name: TRITON_KEY_ID
          valueFrom:
            secretKeyRef:
              name: triton-credentials
              key: triton-key-id
        - name: TRITON_ACCOUNT
          valueFrom:
            secretKeyRef:
              name: triton-credentials
              key: triton-account
        - name: TRITON_URL
          valueFrom:
            secretKeyRef:
              name: triton-credentials
              key: triton-url
        - name: TRITON_LB_IMAGE
          valueFrom:
            configMapKeyRef:
              name: triton-config
              key: lb-image
        - name: TRITON_LB_PACKAGE
          valueFrom:
            configMapKeyRef:
              name: triton-config
              key: lb-package
        - name: TRITON_PROVISION_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: triton-config
              key: provision-timeout
        - name: TRITON_DELETE_TIMEOUT
          valueFrom:
            configMapKeyRef:
              name: triton-config
              key: delete-timeout
        volumeMounts:
        - name: triton-key
          mountPath: /etc/triton
          readOnly: true
        resources:
          limits:
            cpu: 500m
            memory: 512Mi
          requests:
            cpu: 250m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
      volumes:
      - name: triton-key
        secret:
          secretName: triton-credentials
          defaultMode: 0400
          items:
          - key: triton-key
            path: key
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - triton-loadbalancer-controller
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: triton-loadbalancer-controller-metrics
  namespace: triton-system
  labels:
    app: triton-loadbalancer-controller
spec:
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
  selector:
    app: triton-loadbalancer-controller